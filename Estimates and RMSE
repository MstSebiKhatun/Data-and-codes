import matplotlib.pyplot as plt
import numpy as np
import matplotlib.patches as mpatches

params_figure1 = [r"$\beta_0$", r"$\gamma$", r"$\mu$", r"$\sigma$", r"$\varphi^{-1}$"]
medians_figure1 = [0.2996, 0.1431, 0.4997, 0.1997, 0.1705]
lower_50_figure1 = [0.2929, 0.1296, 0.4866, 0.1928, 0.1497]
upper_50_figure1 = [0.3063, 0.1566, 0.5128, 0.2067, 0.1913]
lower_90_figure1 = [0.2835, 0.1111, 0.4678, 0.1834, 0.1261]
upper_90_figure1 = [0.3164, 0.1758, 0.5317, 0.2164, 0.2290]
R_hat1 = [1.0002, 1.0006, 1.0004, 1.0002, 1.0019]
box_colors1 = ['green', 'purple', 'hotpink', 'cyan', 'orange']
median_colors1 = ['red' if r <= 1.05 else 'yellow' if r <= 1.1 else 'green' for r in R_hat1]

params_figure2 = [r"$\beta_1$", r"$\eta$", r"$\phi$"]
medians_figure2 = [1.0003, 49.9862, 5.9681]
lower_50_figure2 = [0.8585, 46.5833, 5.2355]
upper_50_figure2 = [1.1421, 53.3891, 6.7007]
lower_90_figure2 = [0.6678, 41.4176, 4.3018]
upper_90_figure2 = [1.3289, 58.2504, 7.9035]
R_hat2 = [1.0003, 1.0002, 1.0019]
box_colors2 = ['purple', 'cyan', 'orange']
median_colors2 = ['red' if r <= 1.05 else 'yellow' if r <= 1.1 else 'green' for r in R_hat2]

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 4))
for i in range(len(params_figure1)):
    ax1.plot([lower_90_figure1[i], upper_90_figure1[i]], [i, i], color='black', lw=2)
    ax1.plot([lower_90_figure1[i], lower_90_figure1[i]], [i - 0.1, i + 0.1], color='blue', lw=2)
    ax1.plot([upper_90_figure1[i], upper_90_figure1[i]], [i - 0.1, i + 0.1], color='blue', lw=2)
    ax1.add_patch(mpatches.Rectangle((lower_50_figure1[i], i - 0.3),
                                     upper_50_figure1[i] - lower_50_figure1[i], 0.6,
                                     edgecolor='black', facecolor=box_colors1[i], alpha=0.7))
    ax1.add_patch(mpatches.Rectangle((medians_figure1[i] - 0.005, i - 0.3),
                                     0.003, 0.6, edgecolor='black',
                                     facecolor=median_colors1[i], alpha=0.9))
ax1.set_yticks(range(len(params_figure1)))
ax1.set_yticklabels(params_figure1, fontsize=12)
ax1.set_xlim(0.1, 0.6)
ax1.grid(True, axis='x', linestyle='--', alpha=0.7)
ax1.grid(True, axis='y', linestyle='--', alpha=0.7)

for i in range(len(params_figure2)):
    ax2.plot([lower_90_figure2[i], upper_90_figure2[i]], [i, i], color='black', lw=2)
    ax2.plot([lower_90_figure2[i], lower_90_figure2[i]], [i - 0.1, i + 0.1], color='blue', lw=2)
    ax2.plot([upper_90_figure2[i], upper_90_figure2[i]], [i - 0.1, i + 0.1], color='blue', lw=2)
    ax2.add_patch(mpatches.Rectangle((lower_50_figure2[i], i - 0.3),
                                     upper_50_figure2[i] - lower_50_figure2[i], 0.6,
                                     edgecolor='black', facecolor=box_colors2[i], alpha=0.7))
    ax2.add_patch(mpatches.Rectangle((medians_figure2[i] - 0.005, i - 0.3),
                                     0.5, 0.6, edgecolor='black',
                                     facecolor=median_colors2[i], alpha=0.9))
ax2.set_yticks(range(len(params_figure2)))
ax2.set_yticklabels(params_figure2, fontsize=12)
ax2.grid(True, axis='x', linestyle='--', alpha=1)
ax2.grid(True, axis='y', linestyle='--', alpha=1)

legend_patches = [
    mpatches.Patch(color='red', label=r'$\hat{R} \leq 1.05$'),
    mpatches.Patch(color='yellow', label=r'$1.05 < \hat{R} \leq 1.1$'),
    mpatches.Patch(color='green', label=r'$\hat{R} > 1.1$')
]

ax1.legend(handles=legend_patches, ncol=3, loc='upper center', bbox_to_anchor=(0.5, 1.35), fontsize=12)
for spine in ax1.spines.values():
    spine.set_edgecolor('black')
    spine.set_linewidth(2)

for spine in ax2.spines.values():
    spine.set_edgecolor('black')
    spine.set_linewidth(2)
plt.tight_layout()
plt.show()

#############################################
import matplotlib.pyplot as plt
import numpy as np

methods = ['EG', 'ML', 'SB', 'TD']
rmse_values = [556.1581, 484.98, 11115.75, 462.89]
x_positions = np.arange(len(methods))
plt.figure(figsize=(6, 4))
plt.grid(True, linestyle='--', alpha=1, zorder=0)


bars = plt.bar(x_positions, rmse_values, color=['blue', 'green', 'red', 'black'],
               width=0.4, edgecolor='black', zorder=3)
plt.xticks(x_positions, methods, fontsize=14)
plt.ylabel('RMSE', fontsize=14)
legend = plt.legend(bars, rmse_values, loc='upper left', fontsize=14, frameon=True)
legend.get_frame().set_edgecolor('black')  # Add border color to legend box
legend.get_frame().set_linewidth(2)  # Make legend box border thicker
ax = plt.gca()  # Get current axis
for spine in ax.spines.values():
    spine.set_linewidth(2)  # Adjust border thickness
plt.tight_layout()
plt.show()

############################################################
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# -------------------- Define Data --------------------
#test_percentages = [40, 57, 66, 75, 81]  # Test data percentages
#RMSE_values = [4207.2437, 1427.1350, 198.6110, 72.5816, 18.1536]  # RMSE values
#MAE_values = [2510.1418, 984.7341, 126.1563, 65.2117, 14.4750]  # MAE values
#MAPE_values = [79.42, 72.82, 51.13, 46.05, 30.42]  # MAPE values (in percentage)


test_percentages = [60, 43, 34, 25, 19]  # Test data percentages
RMSE_values = [4059.3968, 2639.1781, 1151.2961, 198.61, 72.5816]  # RMSE values
MAE_values = [2357.0076, 1526.7026, 765.556, 126.1563, 65.2117]  # MAE values
MAPE_values = [83.42, 62.82, 59.8637, 51.13, 30.42]  # MAPE values (in percentage)
color_sets = [['#1f77b4', '#ff7f0e', '#2ca02c'],  # 55% Test Data
              ['#d62728', '#9467bd', '#8c564b'],  # 38% Test Data
              ['#e377c2', '#7f7f7f', '#bcbd22'],  # 25% Test Data
              ['#17becf', '#aec7e8', '#ffbb78'],  # 19% Test Data
              ['#98df8a', '#c5b0d5', '#f7b6d2']]  # 4% Test Data

x = np.arange(len(test_percentages))  # X-axis positions
width = 0.2  # Bar width

fig, ax = plt.subplots(figsize=(8, 5))
bars = [] 
for i in range(len(test_percentages)):
    bars.append(ax.bar(x[i] - width, RMSE_values[i], width, color=color_sets[i][0], zorder=3))  # RMSE first
    bars.append(ax.bar(x[i], MAE_values[i], width, color=color_sets[i][1], zorder=3))  # MAE second
    bars.append(ax.bar(x[i] + width, MAPE_values[i], width, color=color_sets[i][2], zorder=3))  # MAPE third

ax.set_xlabel('Test data percentage (%)', fontsize=12)
ax.set_ylabel('Values', fontsize=12)
ax.set_title('Values of RMSE, MAE, and MAPE for different test data', fontsize=14)
ax.set_xticks(x)
ax.set_xticklabels([f"{p}%" for p in test_percentages], fontsize=11)
ax.grid(axis='y', linestyle='--', alpha=0.7, zorder=0)  # Grid behind bars
for spine in ax.spines.values():
    spine.set_edgecolor('black')
    spine.set_linewidth(2)

import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
def create_legend(test_idx, title, loc, font_size=10):
    patches = [
        mpatches.Patch(color=color_sets[test_idx][0], label=f'RMSE: {RMSE_values[test_idx]:.2f}'),
        mpatches.Patch(color=color_sets[test_idx][1], label=f'MAE: {MAE_values[test_idx]:.2f}'),
        mpatches.Patch(color=color_sets[test_idx][2], label=f'MAPE: {MAPE_values[test_idx]:.2f}')
    ]
    legend = fig.legend(handles=patches, title=f'Test data: {title}', loc='upper left', bbox_to_anchor=loc, fontsize=font_size, frameon=True)
    legend.get_frame().set_edgecolor('black')
    legend.get_frame().set_linewidth(2)
create_legend(0, "60%", (0.28, 0.9), font_size=10)
create_legend(1, "43%", (0.5, 0.9), font_size=10)
create_legend(2, "34%", (0.72, 0.9), font_size=10)
create_legend(3, "25%", (0.44, 0.7), font_size=10)
create_legend(4, "19%", (0.65, 0.7), font_size=10)
plt.tight_layout()
plt.show()

